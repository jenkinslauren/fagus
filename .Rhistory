install.packages('Rcpp')
install.packages('devtools')
install.packages('Rdpack')
# gcm <- 'Lorenz_ccsm'
library(RColorBrewer)
colors <- c('#d73027','#f46d43','#fdae61','#fee08b','#ffffbf','#d9ef8b','#a6d96a','#66bd63','#1a9850')
# ENM Template, Fagus
# Author: Lauren Jenkins
# 25 January 2022
# Last updated: 13 June 2022
rm(list = ls())
## load packages ##
# for visualization #
library(sp)
library(sf)
library(ggplot2)
# maps #
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
# for handling rasters #
library(raster)
library(rgdal)
library(dismo)
# library(rgeos) # not used, but may be helpful when debugging
# additional tools #
library(tools)
library(units)
library(dplyr)
library(tidyr)
# enm tools #
library(enmSdm)
library(maxnet)
## genus constants ##
genus <- 'fagus'
speciesList <- paste0('Fagus ',
c('grandifolia'))
setwd(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/', genus))
# set constants #
nad27_crs <- getCRS('nad27')
wgs84_crs <- getCRS('wgs84')
ll <- c('longitude', 'latitude')
yrs <- seq(22 , 1, by = -1) # timestep indicies helper
climYears <- seq(21000, 0, by=-1000)
climYear <- 0 # only modeling present-day in this script
pc <- 5 # number of principal components used from environmental data
gcmList <- c('hadley', 'ccsm', 'ecbilt') # general circulation models for env data
# reference raster from ccsm env data for cell size, used in thinning
lorenzRast <- raster::raster('/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/0BP/an_avg_ETR.tif')
gcm <- 'hadley'
# gcm <- 'Lorenz_ccsm'
library(RColorBrewer)
colors <- c('#d73027','#f46d43','#fdae61','#fee08b','#ffffbf','#d9ef8b','#a6d96a','#66bd63','#1a9850')
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
fileName
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
f <- fileName
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
s <- gsub('\\..*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
pdf(file = paste0('./predictions/pdf/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
title <- gsub('.*/', '', s)
for (i in 1:22) {
par(mfrow=c(1,2))
plot(b[[i]], main = paste0(names(b[[i]]),' ', title),  col = colors, axes = F)
plot(b[[22]], main = paste0(names(b[[22]]),' ', title),  col = colors, axes = F)
}
dev.off()
maps <- stack('/Volumes/lj_mac_22/pollen/predictions-', toupper(genus), '_meanpred.tif')
rm(list=ls())
### predictions
###############
genus <- 'fagus'
maps <- stack('/Volumes/lj_mac_22/pollen/predictions-', toupper(genus), '_meanpred.tif')
### predictions
###############
genus <- 'fagus'
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land--for visualization
times <- seq(0, -21000, by = -1000)
for (countTime in seq_along(times)) {
time <- times[countTime]
# if (time < -5000) {
# land mask
land <- raster(paste0('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/', -1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
# }
}
for (countTime in seq_along(times)) {
time <- times[countTime]
# if (time < -5000) {
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
climYear, 'BP/', vars[1], '.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
# }
}
for (countTime in seq_along(times)) {
time <- times[countTime]
# if (time < -5000) {
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/', gcm,
'/tifs/', -1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
# }
}
for (countTime in seq_along(times)) {
time <- times[countTime]
# if (time < -5000) {
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm//tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
# }
}
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
rm(list=ls())
# gcm <- 'Lorenz_ccsm'
library(RColorBrewer)
colors <- c('#d73027','#f46d43','#fdae61','#fee08b','#ffffbf','#d9ef8b','#a6d96a','#66bd63','#1a9850')
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
gcm <- 'ccsm'
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
pc <- 5
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
length(fileName)
f <- fileName[1]
s <- gsub('\\..*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.Rdata'))
pdf(file = paste0('./predictions/pdf/', s, '.pdf'), width = 11, height = 8.5)
dev.off()
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
title <- gsub('.*/', '', s)
i <- 1
plot(b[[i]], main = paste0(names(b[[i]]),' ', title),  col = colors, axes = F)
map("state", add = T)
map("world", add = T)
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
s <- gsub('\\..*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.Rdata'))
rm(list=ls())
library(RColorBrewer)
colors <- c('#d73027','#f46d43','#fdae61','#fee08b','#ffffbf','#d9ef8b','#a6d96a','#66bd63','#1a9850')
genus <- 'fagus'
setwd(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/', genus))
gcmList <- c('hadley', 'ccsm', 'ecbilt')
pc <- 5
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
gcm <- 'hadley'
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
if(gcm == 'ecbilt') {
g <- 'ECBilt'
} else if(gcm == 'ccsm') {
g <- 'CCSM'
} else {
g <- 'HadAM3H'
}
f <- fileName
s <- gsub('\\..*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.Rdata'))
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
t <- paste0('\n', sub("_", " ", speciesAb_), '\nGCM = ', g)
par(mfrow=c(1,2), mar=c(2,1,5,1)+0.1)
plot(b[[1]], main = paste0(sub("\\.", " ", sub("X", "", names(b[[1]]))),' ', t),
col = colors, legend.mar = 10, axes = F, box = F)
plot(sp::spTransform(rangeMap, CRS(projection(b[[1]]))), border='blue', add = T)
plot(sp::spTransform(world, CRS(projection(b[[1]]))), border = 'black', add = T)
# load range map for given species
range <- paste0('/Volumes/lj_mac_22/MOBOT/USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
range <- suppressWarnings(shapefile(range))
projection(range) <- enmSdm::getCRS('nad27')
range <- range[range$CODE == 1, ] # remove holes
par(mfrow=c(1,2), mar=c(2,1,5,1)+0.1)
plot(b[[1]], main = paste0(sub("\\.", " ", sub("X", "", names(b[[1]]))),' ', t),
col = colors, legend.mar = 10, axes = F, box = F)
plot(sp::spTransform(range, CRS(projection(b[[1]]))), border='blue', add = T)
plot(sp::spTransform(world, CRS(projection(b[[1]]))), border = 'black', add = T)
plot(b[[22]], main = paste0(sub("\\.", " ", sub("X", "", names(b[[22]]))),' ', t),
col = colors, legend.mar = 10, axes = F, box = F)
plot(sp::spTransform(range, CRS(projection(b[[22]]))), border='blue', add = T)
plot(sp::spTransform(world, CRS(projection(b[[22]]))), border = 'black', add = T)
