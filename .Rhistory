# function for masking pollen model by land & ice #
getPollen <- function(times) {
if(!file.exists(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'))) {
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
### mask by glaciers and available land ###
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land (for visualization) #
for (countTime in seq_along(times)) {
time <- times[countTime]
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
}
### mask by ice (for calculating BV) ###
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
}
return(stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif')))
}
jaccard_fun <- function(x, y) {
intersection <- x * y
intersection_sum <- raster::cellStats(intersection, stat = 'sum')
sum_x <- raster::cellStats(x, stat = 'sum')
sum_y <- raster::cellStats(y, stat = 'sum')
union <- sum_x + sum_y - intersection_sum
return (intersection_sum/union)
}
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
pollenRast <- brick(pollenRast)
pollenRast <- pollenRast[[1]]
world2 <- sp::spTransform(world, proj4string(out$simulationScale[[2]]))
for(evalType in evalTypes) {
for(gcm in gcmList) {
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
gcmRast <- out$simulationScale[[2]]
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
# pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
pollen_refugia <- pollenRast >= t
# refugiaId <- raster::clump(pollen_refugia, directions = 8, gaps = F)
# names(refugiaId) <- 'refugiaId'
#
# plot(refugiaId, main = paste0(names(pollenRast),' ', title), box = F, axes = F)
# plot(world2, add = T)
#
# abund <- pollenRast * pollen_refugia
# names(abund) <- 'refugiaAbund'
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(gcm_refugia, pollen_refugia)
jaccard$j[which(jaccard$threshold == t)] <- j
}
write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_kappa'),
append = T, row.names = F)
write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_jaccard'),
append = T, row.names = F)
# dev.off()
}
}
plot(gcm_refugia)
gcm_refugia <- raster::projectRaster(gcm_refugia, pollenRast)
plot(gcm_refugia)
gcm_refugia
pollen_refugia
rm(list = ls())
library(data.table)
library(xlsx)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
## genus constants ##
genus <- 'fagus'
speciesList <- paste0('Fagus ',
c('grandifolia'))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
ll <- c('longitude', 'latitude')
gcmList <- c('hadley','ccsm', 'ecbilt')
evalTypes <- c('geo', 'random')
model <- 'sdm'
pc <- 5
predictors <- c(paste0('pca', 1:pc))
climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
# function for masking pollen model by land & ice #
getPollen <- function(times) {
if(!file.exists(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'))) {
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
### mask by glaciers and available land ###
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land (for visualization) #
for (countTime in seq_along(times)) {
time <- times[countTime]
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
}
### mask by ice (for calculating BV) ###
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
}
return(stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif')))
}
for(evalType in evalTypes) {
for(gcm in gcmList) {
print(paste0("GCM = ", gcm))
thresholds <- list()
a <- 1
for(sp in speciesList) {
print(paste0("Species = ", sp))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2",
paste0(substr(sp,1,4), toupper(substr(sub("^\\S+\\s+", '', sp),1,1)),
substr(sub("^\\S+\\s+", '', sp),2,4)))
# load Little range map for given species
rangeName <- paste0('littleRange_', gsub('_', '', speciesAb_))
range <- paste0('/Volumes/lj_mac_22/MOBOT/USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
range <- suppressWarnings(shapefile(range))
projection(range) <- enmSdm::getCRS('nad27')
range <- range[range$CODE == 1, ] # remove holes
evalFolderName <- paste0('./models/model_evaluations/', evalType, '_k_folds/',
speciesAb_, '/', gcm, '/')
# set constants for retrieving background sites #
bgFileName <- paste0(baseFolder,
'background_sites/Random Background Sites across Study Region.Rdata')
load(bgFileName) # load bg sites in calibration region
# set constants for retrieving model objects #
modelFileName <- paste0('./models/predictions/', speciesAb_,
'/GCM_', gcm, '_PC', pc, '.rData')
load(modelFileName) # load model object, bg, and records for given species
# load k-folds for presences and background sites from model evaluations
t <- list()
for(i in 1:5) {
# print(paste0('K-fold ', i, ':'))
load(paste0(evalFolderName, 'model_', i, '.Rdata'))
temp <- enmSdm::thresholdWeighted(predPres, predBg, na.rm = T)
t <- append(t, temp['msss'])
}
thresholds[[a]] <- t
if (model == 'sdm') {
thresholds <- as.data.frame(thresholds)
thresholds <- rbind(thresholds, mean = summarize_all(thresholds, mean, na.rm = T))
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
t <- c(thresholds['mean',])
for(z in 1:length(fileName)) {
threshold <- t[[z]]
f <- fileName[z]
s <- gsub('\\..*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./models/', speciesAb_, '_Maxent_PC', pc, '_GCM_', gcm, '.rData'))
b <- brick(f)
b <- b[[1]]
names(b) <- paste0(21, ' Kybp')
title <- gsub('.*/', '', s)
}
}
# dev.off()
else if(model == 'pollen') {
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
threshold <- as.numeric(rowMeans(thresholds)['mean'])
load(paste0('./workspaces/07 - ', gcm, ' genus merge'))
b <- stack(meansList)
b <- b[[1]]
names(b) <- paste0(21, ' Kybp')
}
gcm_refugia <- b >= threshold
gcm_refugia <- raster::projectRaster(gcm_refugia, pollenRast)
refugiaId <- raster::clump(gcm_refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
# par(mfrow=c(1,2))
# plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
abund <- b * gcm_refugia
names(abund) <- 'refugiaAbund'
nrows <- nrow(b)
ncols <- ncol(b)
ncells <- raster::ncell(b)
v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
cellNum <- raster::raster(cellNum, template=b)
cellNum <- as.vector(cellNum)
simRefugiaBinary <- as.vector(gcm_refugia)
refugeCellNum <- cellNum[simRefugiaBinary]
if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
# mean refuge abundance
meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
out <- list(
simulationScale = raster::stack(refugiaId, abund),
refugeCellNum = refugeCellNum,
meanRefugeAbund = meanRefugeAbund
)
# par(mfrow=c(1,2))
# plot(out$simulationScale[[1]], main = paste0('Refugia\n', speciesAb_, '\n', gcm),
#      col = colors, axes = F)
# map("world", add = T)
plot(out$simulationScale[[2]], main = paste0('Refugia abundance\n',
speciesAb_, ', ', gcm, '\n',
evalType, ' evaluations'),
col = colors, axes = F, box = F)
world2 <- sp::spTransform(world, proj4string(out$simulationScale[[2]]))
plot(world2, add = T)
maps::map("world", add = T)
save.image(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
}
a <- a + 1
}
}
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
pollenRast <- brick(pollenRast)
pollenRast <- pollenRast[[1]]
for(evalType in evalTypes) {
for(gcm in gcmList) {
print(paste0("GCM = ", gcm))
thresholds <- list()
a <- 1
for(sp in speciesList) {
print(paste0("Species = ", sp))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2",
paste0(substr(sp,1,4), toupper(substr(sub("^\\S+\\s+", '', sp),1,1)),
substr(sub("^\\S+\\s+", '', sp),2,4)))
# load Little range map for given species
rangeName <- paste0('littleRange_', gsub('_', '', speciesAb_))
range <- paste0('/Volumes/lj_mac_22/MOBOT/USTreeAtlas/SHP/',
tolower(gsub('_', '', speciesAb_)), '/',
tolower(gsub('_', '', speciesAb_)),
'.shp')
range <- suppressWarnings(shapefile(range))
projection(range) <- enmSdm::getCRS('nad27')
range <- range[range$CODE == 1, ] # remove holes
evalFolderName <- paste0('./models/model_evaluations/', evalType, '_k_folds/',
speciesAb_, '/', gcm, '/')
# set constants for retrieving background sites #
bgFileName <- paste0(baseFolder,
'background_sites/Random Background Sites across Study Region.Rdata')
load(bgFileName) # load bg sites in calibration region
# set constants for retrieving model objects #
modelFileName <- paste0('./models/predictions/', speciesAb_,
'/GCM_', gcm, '_PC', pc, '.rData')
load(modelFileName) # load model object, bg, and records for given species
# load k-folds for presences and background sites from model evaluations
t <- list()
for(i in 1:5) {
# print(paste0('K-fold ', i, ':'))
load(paste0(evalFolderName, 'model_', i, '.Rdata'))
temp <- enmSdm::thresholdWeighted(predPres, predBg, na.rm = T)
t <- append(t, temp['msss'])
}
thresholds[[a]] <- t
if (model == 'sdm') {
thresholds <- as.data.frame(thresholds)
thresholds <- rbind(thresholds, mean = summarize_all(thresholds, mean, na.rm = T))
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
t <- c(thresholds['mean',])
for(z in 1:length(fileName)) {
threshold <- t[[z]]
f <- fileName[z]
s <- gsub('\\..*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./models/', speciesAb_, '_Maxent_PC', pc, '_GCM_', gcm, '.rData'))
b <- brick(f)
b <- b[[1]]
names(b) <- paste0(21, ' Kybp')
title <- gsub('.*/', '', s)
}
}
# dev.off()
else if(model == 'pollen') {
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
threshold <- as.numeric(rowMeans(thresholds)['mean'])
load(paste0('./workspaces/07 - ', gcm, ' genus merge'))
b <- stack(meansList)
b <- b[[1]]
names(b) <- paste0(21, ' Kybp')
}
gcm_refugia <- b >= threshold
gcm_refugia <- raster::projectRaster(gcm_refugia, pollenRast)
refugiaId <- raster::clump(gcm_refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
# par(mfrow=c(1,2))
# plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
abund <- b * gcm_refugia
names(abund) <- 'refugiaAbund'
nrows <- nrow(b)
ncols <- ncol(b)
ncells <- raster::ncell(b)
v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
cellNum <- raster::raster(cellNum, template=b)
cellNum <- as.vector(cellNum)
simRefugiaBinary <- as.vector(gcm_refugia)
refugeCellNum <- cellNum[simRefugiaBinary]
if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
# mean refuge abundance
meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
out <- list(
simulationScale = raster::stack(refugiaId, abund),
refugeCellNum = refugeCellNum,
meanRefugeAbund = meanRefugeAbund
)
# par(mfrow=c(1,2))
# plot(out$simulationScale[[1]], main = paste0('Refugia\n', speciesAb_, '\n', gcm),
#      col = colors, axes = F)
# map("world", add = T)
plot(out$simulationScale[[2]], main = paste0('Refugia abundance\n',
speciesAb_, ', ', gcm, '\n',
evalType, ' evaluations'),
col = colors, axes = F, box = F)
world2 <- sp::spTransform(world, proj4string(out$simulationScale[[2]]))
plot(world2, add = T)
maps::map("world", add = T)
save.image(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
}
a <- a + 1
}
}
jaccard_fun <- function(x, y) {
intersection <- x * y
intersection_sum <- raster::cellStats(intersection, stat = 'sum')
sum_x <- raster::cellStats(x, stat = 'sum')
sum_y <- raster::cellStats(y, stat = 'sum')
union <- sum_x + sum_y - intersection_sum
return (intersection_sum/union)
}
for(evalType in evalTypes) {
for(gcm in gcmList) {
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
# pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
pollen_refugia <- pollenRast >= t
# refugiaId <- raster::clump(pollen_refugia, directions = 8, gaps = F)
# names(refugiaId) <- 'refugiaId'
#
# plot(refugiaId, main = paste0(names(pollenRast),' ', title), box = F, axes = F)
# plot(world2, add = T)
#
# abund <- pollenRast * pollen_refugia
# names(abund) <- 'refugiaAbund'
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(gcm_refugia, pollen_refugia)
jaccard$j[which(jaccard$threshold == t)] <- j
}
write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_kappa'),
append = T, row.names = F)
write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_jaccard'),
append = T, row.names = F)
# dev.off()
}
}
for(evalType in evalTypes) {
for(gcm in gcmList) {
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
# pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
pollen_refugia <- pollenRast >= t
# refugiaId <- raster::clump(pollen_refugia, directions = 8, gaps = F)
# names(refugiaId) <- 'refugiaId'
#
# plot(refugiaId, main = paste0(names(pollenRast),' ', title), box = F, axes = F)
# plot(world2, add = T)
#
# abund <- pollenRast * pollen_refugia
# names(abund) <- 'refugiaAbund'
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcm_refugia)), as.vector(as.matrix(abund))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(gcm_refugia, pollen_refugia)
jaccard$j[which(jaccard$threshold == t)] <- j
}
write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_kappa'),
append = T, row.names = F)
write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_jaccard'),
append = T, row.names = F)
# dev.off()
}
}
for(evalType in evalTypes) {
for(gcm in gcmList) {
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
# pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
pollen_refugia <- pollenRast >= t
# refugiaId <- raster::clump(pollen_refugia, directions = 8, gaps = F)
# names(refugiaId) <- 'refugiaId'
#
# plot(refugiaId, main = paste0(names(pollenRast),' ', title), box = F, axes = F)
# plot(world2, add = T)
#
# abund <- pollenRast * pollen_refugia
# names(abund) <- 'refugiaAbund'
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcm_refugia)), as.vector(as.matrix(abund))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(gcm_refugia, pollen_refugia)
jaccard$j[which(jaccard$threshold == t)] <- j
}
write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_kappa'),
append = T, row.names = F)
write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm, '_jaccard'),
append = T, row.names = F)
# dev.off()
}
}
