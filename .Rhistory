climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
# function for masking pollen model by land & ice #
getPollen <- function(times) {
if(!file.exists(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'))) {
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
### mask by glaciers and available land ###
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land (for visualization) #
for (countTime in seq_along(times)) {
time <- times[countTime]
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
}
### mask by ice (for calculating BV) ###
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
}
return(stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif')))
}
jaccard_fun <- function(x, y) {
intersection <- x * y
intersection_sum <- raster::cellStats(intersection, stat = 'sum')
sum_x <- raster::cellStats(x, stat = 'sum')
sum_y <- raster::cellStats(y, stat = 'sum')
union <- sum_x + sum_y - intersection_sum
return (intersection_sum/union)
}
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
rm(list = ls())
library(data.table)
library(xlsx)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
## genus constants ##
genus <- 'fagus'
speciesList <- paste0('Fagus ',
c('grandifolia'))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
setwd(paste0(baseFolder, genus))
rm(list=ls())
library(BIEN)
## constants for a particular genus ##
genus <- 'carya'
setwd(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/', genus))
dir.create('./species_records')
occsRaw <- BIEN_occurrence_genus(
genus = genus,
cultivated = F,
all.taxonomy = F,
native.status = F,
natives.only = T,
observation.type = T,
political.boundaries = T,
collection.info = T )
## constants for a particular genus ##
genus <- 'Carya'
occsRaw <- BIEN_occurrence_genus(
genus = genus,
cultivated = F,
all.taxonomy = F,
native.status = F,
natives.only = T,
observation.type = T,
political.boundaries = T,
collection.info = T )
toupper(substr(genus,1,1))
paste0(toupper(substr(genus,2,length(genus))))
paste0(substr(genus,2,)))
paste0(substr(genus,2,))
paste0(substr(genus,2,nchar(genus)))
paste0(toupper(substr(genus,1,1)), substr(genus,2,nchar(genus)))
View(occsRaw)
unique(occsRaw$scrubbed_species_binomial)
## constants for a particular genus ##
genus <- 'alnus'
occsRaw <- BIEN_occurrence_genus(
genus = paste0(toupper(substr(genus,1,1)), substr(genus,2,nchar(genus))),
cultivated = F,
all.taxonomy = F,
native.status = F,
natives.only = T,
observation.type = T,
political.boundaries = T,
collection.info = T )
unique(occsRaw$scrubbed_species_binomial)
install.packages('rvest')
library(rvest)
simple <- read_html('http://bonap.net/Napa/TaxonMaps/Genus/County/Alnus')
simple
View(simple)
simple$node
simple
simple[2]
simple[[2]]
simple %>%
html_nodes("table") %>%
html_text()
text <- simple %>% html_nodes("table") %>% html_text()
library(XML)
url <- XML::getRelativeURL('http://bonap.net/Napa/TaxonMaps/Genus/County/Alnus')
table <- readHTMLTable('http://bonap.net/Napa/TaxonMaps/Genus/County/Alnus')
table <- list.clean(table, fun = is.null, recursive = FALSE)
library(RCurl)
install.packages("RCurl")
library(RCurl)
library(rlist)
table <- list.clean(table, fun = is.null, recursive = FALSE)
View(table)
text <- list.clean(text)
table
as.list(table)
table$NULL
table
View(table)
unlist(table)
list(table)
table[1]
table[[1]]
table[[1]][1]
print(table)
split(table, seq(nrow(table)))
nrow(table)
unlist(table)
list(table)
unlist(table[[1]])
data.frame(table)
x <- data.frame(table)
View(x)
x <- data.frame(setNames(table, c()))
colNames(x)
colnames(x)
x <- data.frame(table)
list(colnames(x))
x <- data.frame(setNames(table, c()))
list(colNames(x))
list(colnames(x))
x[, 1]
x <- data.frame(setNames(table, c()))
l <- list(colnames(x))
for(i in 1:ncol(x)) l <- append(l, x[, i])
l
l <- paste0(colnames(x))
l
paste0(l, x[, 1])
paste0(l, ', ', x[, 1])
l <- paste0(colnames(x))
for(i in 1:ncol(x)) l <- paste0(l, ', ', x[, i])
l
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(readxl)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
pc <- 5
predictors <- c(paste0('pca', 1:pc))
climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
genus <- 'fraxinus'
evalType <-'geo'
compMetric <- 'Jaccard'
wd <- paste0(baseFolder, genus)
pollenRast <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif'))
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
pollenRast <- brick(pollenRast)
pollenRast <- pollenRast[[1]]
plot(pollenRast, main = paste0("pollen abundance, 21 KYBP\n", genus),
col = colors, axes = F, box = F)
gcm <- 'hadley'
sheet <- read_excel(paste0(wd, '/pollen_refugia_thresholds.xlsx'),
sheet = paste0(evalType, '_', gcm, '_', tolower(compMetric)))
max_index <- which.max(sheet$j)
threshold <- sheet[max_index,]$threshold
pollen_refugia <- pollenRast >= threshold
par(mfrow=c(1,2))
plot(pollen_refugia, main = paste0("Pollen refugia\n", gcm, ', ',
evalType, ', ', compMetric),
sub = paste0('threshold = ', threshold), col = colors, axes = F, box = F)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
gcm <- 'hadley'
sheet <- read_excel(paste0(wd, '/pollen_refugia_thresholds.xlsx'),
sheet = paste0(evalType, '_', gcm, '_', tolower(compMetric)))
max_index <- which.max(sheet$j)
threshold <- sheet[max_index,]$threshold
pollen_refugia <- pollenRast >= threshold
par(mfrow=c(1,2))
plot(pollen_refugia, main = paste0("Pollen refugia\n", gcm, ', ',
evalType, ', ', compMetric),
sub = paste0('threshold = ', threshold), col = colors, axes = F, box = F)
load(paste0(wd, '/workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
plot(gcm_refugia, main = paste0("SDM refugia\n", gcm, ', ',
evalType, ', ', compMetric),
sub = paste0('threshold = ', threshold), col = colors, axes = F, box = F)
## constants for a particular genus ##
genus <- 'carya'
rm(list=ls())
library(BIEN)
## constants for a particular genus ##
genus <- 'carya'
occsRaw <- BIEN_occurrence_genus(
genus = paste0(toupper(substr(genus,1,1)), substr(genus,2,nchar(genus))),
cultivated = F,
all.taxonomy = F,
native.status = F,
natives.only = T,
observation.type = T,
political.boundaries = T,
collection.info = T )
knitr::opts_chunk$set(echo = TRUE)
genus <- 'fraxinus'
evalType <-'geo'
compMetric <- 'Jaccard'
wd <- paste0(baseFolder, genus)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(readxl)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
pc <- 5
predictors <- c(paste0('pca', 1:pc))
climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
genus <- 'fraxinus'
evalType <-'geo'
compMetric <- 'Jaccard'
wd <- paste0(baseFolder, genus)
pollenRast <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif'))
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
pollenRast <- brick(pollenRast)
pollenRast <- pollenRast[[1]]
plot(pollenRast, main = paste0("pollen abundance, 21 KYBP\n", genus),
col = colors, axes = F, box = F)
gcm <- 'ecbilt'
sheet <- read_excel(paste0(wd, '/pollen_area_comparison_thresholds.xlsx'),
sheet = paste0(evalType, '_', gcm))
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(readxl)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
pc <- 5
predictors <- c(paste0('pca', 1:pc))
climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
gcm <- 'ecbilt'
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
setwd(paste0(baseFold, genus))
setwd(paste0(baseFolder, genus))
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
# calculate area of all cells in raster (km squared)
gcm_area <- cellStats(gcm_refugia, 'sum')
sheet <- read_excel(paste0(wd, '/pollen_area_comparison_thresholds.xlsx'),
sheet = paste0(evalType, '_', gcm))
closest_area <- sheet[which.min(abs(gcm_area - sheet$area))]
closest_area <- sheet[which.min(abs(gcm_area - sheet$area)),]
View(closest_area)
sheet[which.min(abs(gcm_area - sheet$area)),]$threshold
t_closest_area <- sheet[which.min(abs(gcm_area - sheet$area)),]$threshold
closest_area <- sheet[which.min(abs(gcm_area - sheet$area)),]$area
gcm <- 'ecbilt'
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
rm(list = ls())
library(data.table)
library(xlsx)
library(dplyr)
library(geosphere)
library(raster)
library(rnaturalearth)
library(enmSdm)
library(spatialEco)
library(maps)
library(sf)
library(sp)
library(dismo)
library(psych)
library(vegan)
library(viridis)
genus <- 'fagus'
speciesList <- paste0('Fagus ', c(' grandifolia'))
baseFolder <- '/Volumes/lj_mac_22/MOBOT/by_genus/'
setwd(paste0(baseFolder, genus))
ll <- c('longitude', 'latitude')
gcmList <- c('hadley','ccsm', 'ecbilt')
evalTypes <- c('geo', 'random')
model <- 'sdm'
pc <- 5
predictors <- c(paste0('pca', 1:pc))
climYears <- seq(0, -21000, by = -1000)
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
colors <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
# function for masking pollen model by land & ice #
getPollen <- function(times) {
if(!file.exists(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'))) {
maps <- stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred.tif'))
### mask by glaciers and available land ###
daltonAges <- read.csv('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/Dalton et al 2020 QSR Dates from Shapefile Names.csv')
# mask by land (for visualization) #
for (countTime in seq_along(times)) {
time <- times[countTime]
# land mask
land <- raster(paste0('/Volumes/lj_mac_22/MOBOT/by_genus/env_data/ccsm/tifs/',
-1 * time, 'BP/an_avg_TMAX.tif'))
# land <- land * 0 + 1
land <- projectRaster(land, maps)
land <- land * 0 + 1
maps[[countTime]] <- maps[[countTime]] * land
}
### mask by ice (for calculating BV) ###
mapsMasked <- maps
for (countTime in seq_along(times)) {
time <- times[countTime]
# ice mask
closestDalton <- which.min(abs(-1000 * daltonAges$calKiloYear - time))
load(paste0('/Volumes/lj_mac_22/Dalton et al 2020 QSR Ice Layers/RDA Files/daltonEtAl2020_',
sprintf('%.2f', daltonAges$calKiloYear[closestDalton]), '_kiloCalYBP.rda'))
daltonIce <- sp::spTransform(daltonIce, getCRS('albersNA', TRUE))
daltonIce <- rasterize(daltonIce, maps)
daltonIceMask <- calc(daltonIce, fun=function(x) ifelse(is.na(x), 1, NA))
mapsMasked[[countTime]] <- mapsMasked[[countTime]] * daltonIceMask
}
writeRaster(stack(maps),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_landMask.tif'),
format = 'GTiff', overwrite = T)
writeRaster(stack(mapsMasked),
paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus), '_meanpred_iceMask.tif'),
format = 'GTiff', overwrite = T)
}
return(stack(paste0('/Volumes/lj_mac_22/pollen/predictions-',
toupper(genus),
'_meanpred_iceMask.tif')))
}
pollenRast <- getPollen(climYears)
names(pollenRast) <- c(paste0(tools::toTitleCase(genus),
"_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
pollenRast <- brick(pollenRast)
pollenRast <- pollenRast[[1]]
for(evalType in evalTypes) {
for(gcm in gcmList) {
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
# calculate area of all cells in raster (km squared)
gcm_area <- cellStats(gcm_refugia, 'sum')
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
area_comparisons <- data.frame('threshold' = as.double(thresholds), 'area' = NA)
least_difference <- gcm_area
for (t in thresholds) {
pollen_refugia <- pollenRast >= t
# calculate area of all cells in raster (km squared)
pollen_area <- cellStats(pollen_refugia, 'sum')
difference <- abs(gcm_area - pollen_area)
if(difference < least_difference) {
least_difference <- difference
t_least_difference <- t
}
area_comparisons$area[t * 100000] <- pollen_area
}
write.xlsx(area_comparisons, file = './pollen_area_comparison_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm),
append = T, row.names = F)
}
}
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
plot(gcm_refugia)
plot(b)
maxValue(b)
threshold
proportion <- threshold/maxValue(b)
for(evalType in evalTypes) {
for(gcm in gcmList) {
# load refugia for gcm & evalType pair (gcm_refugia)
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia (', evalType, ')'))
gcm_proportion <- threshold/maxValue(b)
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
proportion_comparisons <- data.frame('threshold' = as.double(thresholds),
'proportion' = NA)
least_difference <- gcm_proportion
for (t in thresholds) {
pollen_proportion <- t/maxValue(pollenRast)
difference <- abs(gcm_proportion - pollen_proportion)
if(difference < least_difference) {
least_difference <- difference
t_least_difference <- t
}
proportion_comparisons$proportion[t * 100000] <- pollen_proportion
}
write.xlsx(proportion_comparisons, file = './pollen_proportion_comparison_thresholds.xlsx',
sheetName = paste0(evalType, '_', gcm),
append = T, row.names = F)
}
}
gcm_proportion <- threshold/maxValue(b)
thresholds <- seq(0.00001, maxValue(pollenRast), by = 0.00001)
proportion_comparisons <- data.frame('threshold' = as.double(thresholds),
'proportion' = NA)
least_difference <- gcm_proportion
for (t in thresholds) {
pollen_proportion <- t/maxValue(pollenRast)
difference <- abs(gcm_proportion - pollen_proportion)
if(difference < least_difference) {
least_difference <- difference
t_least_difference <- t
}
proportion_comparisons$proportion[t * 100000] <- pollen_proportion
}
